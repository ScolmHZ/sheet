先稍为介绍一下 vim. vi 是 unix/linux 下极为普遍的一种文本编辑器, 大部分机器上都
有. vi 有各种变种, 在不同的机器上常用不同的变种软件. 其中 vim 比较好用也用得比较
广泛. vim 是 Vi IMproved 的缩写, 表示更好的 vi. 我个人觉得它是非常好的编辑器(为
		了避免 Emacs 粉丝挑眼, 就不说最好了). 没用过的也建议试试看, 当然 vim 对编写文本
文件很方便好用, 比如编写程序, html文档等等, 却不能用来编写 word 文档.

关于 vim 的安装, 基本使用方法等网络上能搜出许多, 就不在这里罗嗦了, 要是对 vim 有
兴趣, 那就看看这里(中文文档): http://vcd.gro.clinux.org/

							  本文就说些其中比较有用, 比较常用的命令, 若能熟练运用这些命令, 那么会发现编辑文件
							  很舒服.

							  说明:
							  以下的例子中 xxx 表示在命令模式下输入 xxx 并回车
							  以下的例子中 :xxx 表示在扩展模式下输入 xxx 并回车
							  小括号中的命令表示相关命令.
							  在编辑模式或可视模式下输入的命令会另外注明.

							  1. 查找

							  /xxx(?xxx) 表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示
							  向上查找.其中xxx可以是正规表达式,关于正规式就不多说了.
							  一般来说是区分大小写的, 要想不区分大小写, 那得先输入
							  :set ignorecase
							  查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.

							  *(#) 当光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的
							  下(上)一个单词. 同样, 再输入 n 查找下一个匹配处, 输入 N 反方
							  向查找.

							  g*(g#) 此命令与上条命令相似, 只不过它不完全匹配光标所在处的单词, 而
							  是匹配包含该单词的所有字符串.

							  gd 本命令查找与光标所在单词相匹配的单词, 并将光标停留在文档的非
							  注释段中第一次出现这个单词的地方.

							  % 本命令查找与光标所在处相匹配的反括号, 包括 () [] {}

							  f(F)x 本命令表示在光标所在行进行查找, 查找光标右(左)方第一个x字符.
							  找到后:
							  输入 ; 表示继续往下找
							  输入 , 表示反方向查找

							  2. 快速移动光标
							  在 vi 中, 移动光标和编辑是两件事, 正因为区分开来, 所以可以很方便的进行光标定
							  位和编辑. 因此能更快一点移动光标是很有用的.

							  w(e) 移动光标到下一个单词.
							  b 移动光标到上一个单词.

							  0 移动光标到本行最开头.
							  ^ 移动光标到本行最开头的字符处.
							  $ 移动光标到本行结尾处.

							  H 移动光标到屏幕的首行.
							  M 移动光标到屏幕的中间一行.
							  L 移动光标到屏幕的尾行.
							  gg 移动光标到文档首行.
							  G 移动光标到文档尾行.
							  c-f (即 ctrl 键与 f 键一同按下) 本命令即 page down.
							  c-b (即 ctrl 键与 b 键一同按下, 后同) 本命令即 page up.

							  '' 此命令相当有用, 它移动光标到上一个标记处, 比如用 gd, * 等查
							  找到某个单词后, 再输入此命令则回到上次停留的位置.

							  '. 此命令相当好使, 它移动光标到上一次的修改行.
							  
							  `. 此命令相当强大, 它移动光标到上一次的修改点.
							  
							  3. 拷贝, 删除与粘贴
							  在 vi 中 y 表示拷贝, d 表示删除, p 表示粘贴. 其中拷贝与删除是与光标移动命令
							  结合的, 看几个例子就能够明白了.
							  
							  yw 表示拷贝从当前光标到光标所在单词结尾的内容.
							  dw 表示删除从当前光标到光标所在单词结尾的内容.
							  y0 表示拷贝从当前光标到光标所在行首的内容.
							  d0 表示删除从当前光标到光标所在行首的内容.
							  y$ 表示拷贝从当前光标到光标所在行尾的内容.
							  d$ 表示删除从当前光标到光标所在行尾的内容.
							  yfa 表示拷贝从当前光标到光标后面的第一个a字符之间的内容.
							  dfa 表示删除从当前光标到光标后面的第一个a字符之间的内容.
							  
							  特殊地:
							  yy 表示拷贝光标所在行.
							  dd 表示删除光标所在行.
							  D 表示删除从当前光标到光标所在行尾的内容.
							  
							  关于拷贝, 删除和粘贴的复杂用法与寄存器有关, 可以自行查询.
							  
							  4. 数字与命令
							  在 vi 中数字与命令结合往往表示重复进行此命令, 若在扩展模式的开头出现则表示行
							  号定位. 如:
							  
							  5fx 表示查找光标后第 5 个 x 字符.
							  
							  5w(e) 移动光标到下五个单词.
							  
							  5yy 表示拷贝光标以下 5 行.
							  5dd 表示删除光标以下 5 行.
							  
							  y2fa 表示拷贝从当前光标到光标后面的第二个a字符之间的内容.
							  
							  :12,24y 表示拷贝第12行到第24行之间的内容.
							  :12,y 表示拷贝第12行到光标所在行之间的内容.
							  :,24y 表示拷贝光标所在行到第24行之间的内容. 删除类似.
							  
							  5. 快速输入字符
							  在 vi 中, 不要求你输入每一个字符, 可以有很多种方法快速输入一些字符.
							  使用 linux/unix 的同学一定有一个经验, 在命令行下输入命令时敲入头几个字符再按
							  TAB 系统就会自动将剩下的字符补齐, 假如有多个匹配则会打印出来. 这就是著名的命令
							  补齐(其实windows中也有文件名补齐功能). vi 中有许多的字符串补齐命令, 非常方便.
							  
							  c-p(c-n) 在编辑模式中, 输入几个字符后再输入此命令则 vi 开始向上(下)搜
							  索开头与其匹配的单词并补齐, 不断输入此命令则循环查找. 此命令
							  会在所有在这个 vim 程序中打开的文件中进行匹配.
							  
							  c-x-l 在编辑模式中, 此命令快速补齐整行内容, 但是仅在本窗口中出现的
							  文档中进行匹配.
							  
							  c-x-f 在编辑模式中, 这个命令表示补齐文件名. 如输入:
							  /usr/local/tom 后再输入此命令则它会自动匹配出:
							  /usr/local/tomcat/
							  
							  abbr 即缩写. 这是一个宏操作, 可以在编辑模式中用一个缩写代替另一个
							  字符串. 比如编写java文件的常常输入 System.out.println, 这很
							  是麻烦, 所以应该用缩写来减少敲字. 可以这么做:
							  :abbr sprt System.out.println
							  以后在输入sprt后再输入其他非字母符号, 它就会自动扩展为System.
							  out.println
							  
							  6. 替换
							  替换是 vi 的强项, 因为可以用正规表达式来匹配字符串.以下提供几个例子.
							  
							  :s/aa/bb/g 将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb
							  :s/\/bb/g 将光标所在行出现的所有 aa 替换为 bb, 仅替换 aa 这个单词
							  :%s/aa/bb/g 将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb
							  :12,23s/aa/bb/g 将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb
							  :12,23s/^/#/ 将从12行到23行的行首加入 # 字符
							  :%s= *$== 将所有行尾多余的空格删除
							  :g/^\s*$/d 将所有不包含字符(空格也不包含)的空行删除.
							  
							  7. 多文件编辑
							  在一个 vim 程序中打开很多文件进行编辑是挺方便的.
							  
							  :sp(:vsp) 文件名 vim 将分割出一个横(纵)向窗口, 并在该窗口中打开新文件.
							  从 vim6.0 开始, 文件名可以是一个目录的名称, 这样, vim 会
							  把该目录打开并显示文件列表, 在文件名上按回车则在本窗口打
							  开该文件, 若输入 O 则在新窗口中打开该文件, 输入 ? 可以看
							  到帮助信息.
							  
							  :e 文件名 vim 将在原窗口中打开新的文件, 若旧文件编辑过, 会要求保存.
							  
							  c-w-w vim 分割了好几个窗口怎么办? 输入此命令可以将光标循环定位
							  到各个窗口之中.
							  
							  :ls 此命令查看本 vim 程序已经打开了多少个文件, 在屏幕的最下方
							  会显示出如下数据:
							  1 %a "usevim.html" 行 162
							  2 # "xxxxxx.html" 行 0
							  
							  其中:
							  1 表示打开的文件序号, 这个序号很有用处.
							  %a 表示文件代号, % 表示当前编辑的文件,
# 表示上次编辑的文件
							  "usevim.html" 表示文件名.
							  行 162 表示光标位置.
							  
							  :b 序号(代号) 此命令将指定序号(代号)的文件在本窗口打开, 其中的序号(代号)
							  就是用 :ls 命令看到的.
							  
							  :set diff 此命令用于比较两个文件, 可以用
							  :vsp filename
							  命令打开另一个文件, 然后在每个文件窗口中输入此命令,就能看
							  到效果了.
							  
							  8. 宏替换
							  vi 不仅可以用 abbr 来替换文字, 也可以进行命令的宏定义. 有些命令输起来很费劲,
							  因此我把它们定义到 - 上, 这样就很方便了.这些配置可以预先写到 ~/.vimrc
							  (windows 下为 $VIM/_vimrc) 中, 写进去的时候不用写前面的冒号.
							  
							  :nmap :nohls 取消被搜索字串的高亮
							  :nmap w 命令模式下转移光标到不同窗口
							  :imap 输入模式下运行
							  :nmap :%s= *$== 删除所有行尾多余的空格.
							  :imap 同上
							  
							  :java 中: (注, 这里为什么说 java 中, 因为以下定义对其他文件格式不起作用, 下文
									  会说到如何实现这一点)
							  :nmap :comp javac:mak -d . %
							   此命令用 javac 编译 java 文件, 它会自动将光标定位到出错点. 不过这需要定
							   义一个 javac.vim 文件在 $VIM/compiler 下, 在 javac.vim 里面只有两行字:
							   setlocal makeprg=javac
							   setlocal errorformat=%A%f:%l:\ %m,%-Z%p^,%-C%.%#
							   
							   :nmap :comp ant:mak
							   此命令用 ant 编译 java 文件, 它会自动将光标定位到出错点. 一般来说, 安装
							   vim 后已经有了compiler/ant.vim文件, 因此这个命令可以直接使用. 但是需要
							   在当前目录下有 build.xml 文件, 当然还必须安装 ant 才行.
							   
							   :nmap :cl 此命令用于查看所有的编译错误.
							   :imap 
							   
							   :nmap :cc 此命令用于查看当前的编译错误.
							   :imap 
							   
							   :nmap :cn 此命令用于跳到下一个出错位置.
							   :imap 
							   
							   :nmap :cp 此命令用于跳到上一个出错位置.
							   :imap 
							   
							   :nmap :JavaBrowser
							   此命令用于在窗口左部分割出一个新窗口, 里面的内容是 java 的资源树, 包括
							   本文件中出现的类, 类的成员变量及成员方法, 就好像 JCreator 表现的那样.
							   在这个窗口中输入 ? 会看到帮助. 嘿嘿, 很好用, 不过需要 ctags 支持.
							   :imap 
							   
							   9. TAB
							   TAB 就是制表符, 单独拿出来做一节是因为这个东西确实很有用.
							   
							   << 输入此命令则光标所在行向左移动一个 tab.
							   >> 输入此命令则光标所在行向右移动一个 tab.
							   5>> 输入此命令则光标后 5 行向右移动一个 tab.
							   :12,24> 此命令将12行到14行的数据都向右移动一个 tab.
							   :12,24>> 此命令将12行到14行的数据都向右移动两个 tab.
							   
							   那么如何定义 tab 的大小呢? 有人愿意使用 8 个空格位, 有人用4个, 有的用2个.
							   有的人希望 tab 完全用空格代替, 也有的人希望 tab 就是 tab. 没关系, vim 能
							   帮助你.以下的设置一般也都先写入配置文件中, 免得老敲.
							   
							   :set shiftwidth=4 设置自动缩进 4 个空格, 当然要设自动缩进先.
							   :set sts=4 即设置 softtabstop 为 4. 输入 tab 后就跳了 4 格.
							   :set tabstop=4 实际的 tab 即为 4 个空格, 而不是缺省的 8 个.
							   :set expandtab 在输入 tab 后, vim 用恰当的空格来填充这个 tab.
							   
							   10. autocmd
							   这个命令十分的强大, 可以用这个命令实现对不同的文件格式应用不同的配置; 可以
							   在新建文件时自动添加上版权声明等等. 这些命令一般定义在 ~/.vimrc 这样的配置文件
							   里面. 由于他很强大, 所以我不能给出很具体的说明, 只能举几个例子, 详细的请看帮助.
							   
							   :autocmd! 删除所有之前的自动命令.
							   autocmd FileType java source ~/.vim/files/java.vim
							   autocmd FileType java source ~/.vim/files/jcommenter.vim
							   以上两条命令让我在打开 java 文件时才应用后面提到的两个配置文件.
							   autocmd BufNewFile *.java 0r ~/.vim/files/skeletons/java.skel
							   以上这条命令让我在新建 java 文件时自动加入 java.skel 文件的内容.
							   autocmd BufNewFile *.java normal gnp
							   以上这条命令让我在新建 java 文件时自动运行 gnp 命令, 这个命令进行一些特殊化
							   处理, 比如将新 java 文件中的 __date__ 替换成今天的日期什么的.
							   
							   11. 常用脚本
							   在 vim.sf.net 你可以发现很多脚本(script), 这些脚本常常有让你意想不到的作用.
							   我常用的有:
							   
							   jcommenter.vim 自动加入 javadoc 风格的注释.
							   JBrowser.vim 类资源浏览. C, C++ 等可以用 Tlist
							   
							   还有许多有用的, 比如 checkstyle.vim 可以检验你的编程风格, jad.vim 可以直接
							   反编译 .class 文件等等.
							   
							   12. 常用配置
							   在~/.vimrc 配置文件中你常常需要一些个性化配置. 比如上面写的一些宏定义, 一些
							   autocmd 定义等等. 比如:
							   
							   set suffixes=.bak,~,.o,.h,.info,.swp,.aux,.bbl,.blg,.dvi,.lof,.log,.lot,.ps,.toc
							   这样在vim中打开文件时, 按 tab 键补齐文件名时它会忽略上述文件.
							   
							   set nu 显示行号
							   set ai 设置自动缩进
							   map Y y$ 让 Y 和 D 一样, 要不然 Y 的本意和 yy 一样.
							   
							   13. 其他
							   还有许多有意思的命令, 记录在这里免得忘记.
							   
							   . 重复上次编辑命令.
							   :g/^/exec "s/^/".strpart(line(".")." ", 0, 4) 在行首插入行号
							   :runtime! syntax/2html.vim 转换 txt 成 html, 会按照你的
							   颜色配置来转
							   
							   
							   支持Java：
							   
							   对标签跳跃的支持
							   
							   
							   
							   标签是Java的标识符，它们可以是包装名、类名、方法名，或者是字段名。在你的代码里创建一个所有标签的大型
							   索引，能够让你使用单个按键就跳跃到任何类、方法或者字段的定义上。这些索引文件都是使用ctags程序创建的，
							   后者在vim的发行版里都有。
							   
							   
							   
							   Ctags会获取Java源文件或者包含有Java源代码的目录的列表，从中提取标识符的信息，再生成所vi需要的用于跳跃
							   到标签的排序索引。下面一行代码是ctags调用的一个例子，只要JAVA_HOME变量被正确地定义，它会生成一个包含
							   有项目源代码里所有标识符的标签文件，Sun核心库源代码也是如此：
							   
							   
							   
							   ctags -f ~/.tags -R ~/myprojects/src $JAVA_HOME/src
							   
							   
							   
							   一旦标签索引创建好了，你所需要做的只是告诉vi要在哪里找到它。这一步是通过将set
							   tags=~/.tags添加到你的~/.vimrc文件里实现的。有了可用的标签索引文件，而且vi也知道了要到哪里去找到它，
							   你现在就可以通过按[CTRL]]来跳跃到任何标识符上了。尽管这对于跳跃到你已经定义的方法、类和你自己编写的字
							   段上很有用，但是如果你将Java核心类库加到你的标签索引里将会更加有用。现在，只用简单地对任何核心类库的
							   类或者方法按[Ctrl] ]，你就会跳跃到它完全使用javadoc所编写成的定义。.
							   
							   
							   
							   标签名的填充
							   
							   
							   
							   
							   
							   虽然跳跃到类、方法和字段定义所在的位置对于查看其javadoc以及检查其内容是有很用处的，但是更常见的情况是，
							   你只是需要检查一个关键字的定义。在大多数IDE里，这一点是通过输入关键字完成的。但是，如果你已经将你的标
							   签文件像前面一部分所讲的那样设置了，那么在vi里填入关键字就只是一个导向性的配置了。
							   
							   
							   
							   将set
							   complete=.,w,b,u,t,I这一行放到你的~/.vimrc文件里，能够让你在插入模式下通过按[Ctrl]N自动地将任何类、方
							   法或者字段名填满。连续按[Ctrl]N将移动到下一个相匹配的地方。当你看到你想要找的标签时，只用继续输入你源
							   代码剩下的部分就行了。你可以在vim的Web网站上找到其他关于标签名填充的提示，包括使用Tab键来进行填充。
							   
							   
							   
							   方法的折叠
							   
							   
							   
							   好的实践经验告诉我们：你应该保持类的短小和简单，因为程序复杂性表现在类的层次性上，而不是500行的方法
							   上。不幸的是，有些类已经脱离了控制，变得事实上无法移动操作了。
							   
							   
							   
							   IDE常常会在左边一个狭窄的框体提供一个列出了内容里方法的表格，以此来减轻开发人员查看冗长源代码的困难。
							   与之相对的是，vi提供了一种它叫做“方法折叠（methodfolding）”的可折叠程序块。折叠允许你隐藏被缩排过的
							   （indented）代码块开头和结尾之间的所有代码。要激活折叠，就要把set foldmethod=indent加到你的~/vimrc里。
							   
							   
							   
							   一旦方法的折叠被激活，你就可以使用:set
							   foldlevel=0来极大地精简一个Java的源文件。如果将折叠的层数设置为零，那么你就是在告诉vi只显示完全没有被缩排的命令行，而后者在大多
							   数Java源文件里代表着包装、导入，以及类或者接口的定义行。设置foldlevel=1就是告诉vi说：除了没有被缩排的命令行，只缩排过一次的命令
							   行也应该被显示，它们包括方法的签名以及其他一些不多的内容。要打开一个折叠夹并查看某个方法所隐藏的内容，你就要在被折叠的命令行上输入zO。
							   
							   
							   
							   通过设置foldlevel就能够很轻易地开启或者取消方法的折叠。我喜欢在调试的时候使用它，但是不喜欢在编写新代码的时候使用它。你要自己来决定它应该如何去适应你的工作方式。
							   
							   IDE不仅仅只是用于编辑；它们还是编译环境。Vi在不需要使用外部编译器和剖析结果信息上的工作做得非常好。现在很多Java的项目都将易于编写脚本的
							   Ant作为一个创建环境。我没有向.vimrc文件里加载很多Ant专用的设置，而是单独创建了一个做作vimAnt脚本，见Listing B。
							   
							   
							   
							   这个脚本调用了一个带有几个参数的Ant可执行文件，然后对输出进行过滤，让其只包含编译器输出。你现在几乎就准备好从vi里调用Ant了。你只需要将
							   Listing
							   C里的命令行加到你的~/.vimrc文件里。这些命令行告诉vi要调用你所创建的vimAnt脚本，并提示它如何剖析Ant的jikes输出。
							   
							   
							   
							   在你的系统路径下有了vimAnt脚本之后，你现在就可以使用:make命令来初始化编译了。当前目录及其所有的父目录都会被搜索，以寻找一个build.xml文件，这个文件的类对象会被调用。错误输出会被vi自动地剖析。
							   
							   
							   
							   一旦你在vi里进行了带有错误的编译，你就可以使用快速修复（quick
							   fix）模式来迅速地到达错误地点，进行及时的修补。:cn命令会把你带到下一个出错地点，而不考虑它在什么文件里。:cc命令会向你显示当前错误的编译
							   器输出信息；而:cl会生成一个列有项目所有错误的列表，以供浏览这些错误。修补好你的错误，你就离成功的编译只有一:make之遥了。
							   
							   还有一篇是滇狐（水木上的一个牛人）写的关于vim的插件：
							   http://learn.tsinghua.edu.cn:8080/2005212716/html/vimplugins.html`'















							   ctrl+n向下补全

							   ctrl+p向下补全

							   ctags正确用法：ctags -R --C-kinds=+p --fields=+aS --extra=+q



							   整行补全                        CTRL-X CTRL-L
							   根据当前文件里关键字补全        CTRL-X CTRL-N
							   根据字典补全                    CTRL-X CTRL-K
							   根据同义词字典补全              CTRL-X CTRL-T
							   根据头文件内关键字补全          CTRL-X CTRL-I
							   根据标签补全                    CTRL-X CTRL-]
							   补全文件名                      CTRL-X CTRL-F
							   补全宏定义                      CTRL-X CTRL-D
							   补全vim命令                     CTRL-X CTRL-V
							   用户自定义补全方式              CTRL-X CTRL-U

							   拼写建议                        CTRL-X CTRL-S





							   inoremap <C-]>             <C-X><C-]>
							   inoremap <C-F>             <C-X><C-F>
							   inoremap <C-D>             <C-X><C-D>
							   inoremap <C-L>             <C-X><C-L>
{querytype} 即相对应于实际的cscope行接口数字，同时也相对应于nvi命令：

0或者s   —— 查找这个C符号

1或者g  —— 查找这个定义

2或者d  —— 查找被这个函数调用的函数（们）

3或者c  —— 查找调用这个函数的函数（们）

4或者t   —— 查找这个字符串

6或者e  —— 查找这个egrep匹配模式

7或者f   —— 查找这个文件

8或者i   —— 查找#include这个文件的文件（们）

												nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>

												nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>

												nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>

												nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>

												nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>

												nmap <C-@>f :cs find f <C-R>=expand("<cword>")<CR><CR>

												nmap <C-@>i :cs find i ^<C-R>=expand("<cword>")<CR>$<CR>

												nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
